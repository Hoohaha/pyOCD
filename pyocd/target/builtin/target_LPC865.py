# pyOCD debugger
# Copyright (c) 2022 NXP
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ...coresight.coresight_target import CoreSightTarget
from ...core.memory_map import (FlashRegion, RamRegion, MemoryMap)
from ...debug.svd.loader import SVDFile



FLASH_ALGO = {
    'load_address' : 0x10000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xe7fdbe00,
    0x480bb5b0, 0x39544601, 0x600a2202, 0x24004b09, 0x1f05601c, 0x2501602c, 0x60046005, 0x60456005,
    0x601c600a, 0xf0004620, 0x4620f911, 0x46c0bdb0, 0x40048054, 0x40048240, 0x47702000, 0x4909b580,
    0x60082000, 0xf0002140, 0x2800f90b, 0x2001d001, 0x2000bd80, 0x4a042140, 0xf948f000, 0x41881e41,
    0x46c0bd80, 0x40048240, 0x00005dc0, 0x490ab510, 0x600a2200, 0x46200a84, 0xf0004621, 0x2800f8f1,
    0x2001d001, 0x4a05bd10, 0x46214620, 0xf92ef000, 0x41881e41, 0x46c0bd10, 0x40048240, 0x00005dc0,
    0xb083b5f0, 0x46054614, 0x21004812, 0x2d006001, 0x6820d10f, 0x1d279002, 0x69a0cfce, 0x98029001,
    0x18891841, 0x198918c9, 0x980119c9, 0x42401808, 0x0aa861e0, 0xf0004601, 0x4606f8c3, 0x02022001,
    0x46284b05, 0xf0004621, 0x4330f8db, 0x41881e41, 0xbdf0b003, 0x40048240, 0x00005dc0, 0x460db5b0,
    0x200f4604, 0x46200701, 0x46114388, 0xf000462a, 0x2800f9e1, 0x1964d100, 0xbdb04620, 0xb08ab510,
    0x20004604, 0x90089009, 0x90069007, 0x91052136, 0x90039004, 0x90019002, 0xf3ef9000, 0xb6728010,
    0x4669a805, 0x47904a05, 0x9801b662, 0x98006020, 0xd0012800, 0x18404902, 0xbd10b00a, 0x0f001d91,
    0x000027d8, 0xb08ab510, 0x20004604, 0x90089009, 0x90069007, 0x91052137, 0x90039004, 0x90019002,
    0xf3ef9000, 0xb6728010, 0x4669a805, 0x47904a06, 0x9801b662, 0xc4039902, 0x28009800, 0x4903d001,
    0xb00a1840, 0x46c0bd10, 0x0f001d91, 0x000027d8, 0xb08cb510, 0x2100460c, 0x910a910b, 0x91069109,
    0x91049105, 0x91029103, 0x466a9101, 0x910071d0, 0x20397050, 0x92089007, 0x8010f3ef, 0xa807b672,
    0x4a05a902, 0xb6624790, 0x28009802, 0x4903d001, 0x60201840, 0xbd10b00c, 0x0f001d91, 0x000027d8,
    0xb08ab510, 0x20004604, 0x90089009, 0x90069007, 0x9105213a, 0x90039004, 0x90019002, 0xf3ef9000,
    0xb6728010, 0x4669a805, 0x47904a06, 0xab01b662, 0xc40fcb0f, 0x28009800, 0x4903d001, 0xb00a1840,
    0x46c0bd10, 0x0f001d91, 0x000027d8, 0x40082103, 0x68134a02, 0x1818438b, 0x47706010, 0x40040010,
    0xb08ab580, 0x92092200, 0xc307ab06, 0x90052032, 0x92039204, 0x92019202, 0xf3ef9200, 0xb6728010,
    0x4669a805, 0x47904a04, 0x9800b662, 0xd0012800, 0x18404902, 0xbd80b00a, 0x0f001d91, 0x000027d8,
    0xb08ab580, 0xc707af06, 0x90052033, 0x90042000, 0x90029003, 0x90009001, 0x00c1207d, 0xf0004618,
    0x9009f936, 0x8010f3ef, 0xa805b672, 0x4a054669, 0xb6624790, 0x28009800, 0x4903d001, 0xb00a1840,
    0x46c0bd80, 0x0f001d91, 0x000027d8, 0xb08ab580, 0x93092300, 0x90069107, 0x90052034, 0x93039304,
    0x93019302, 0x207d9300, 0x461000c1, 0xf90ff000, 0xf3ef9008, 0xb6728010, 0x4669a805, 0x47904a04,
    0x9800b662, 0xd0012800, 0x18404902, 0xbd80b00a, 0x0f001d91, 0x000027d8, 0xb08ab580, 0x93092300,
    0x90069107, 0x9005203b, 0x93039304, 0x93019302, 0x207d9300, 0x461000c1, 0xf8e9f000, 0xf3ef9008,
    0xb6728010, 0x4669a805, 0x47904a04, 0x9800b662, 0xd0012800, 0x18404902, 0xbd80b00a, 0x0f001d91,
    0x000027d8, 0xb08ab580, 0x92092200, 0xc307ab06, 0x90052035, 0x92039204, 0x92019202, 0xf3ef9200,
    0xb6728010, 0x4669a805, 0x47904a04, 0x9800b662, 0xd0012800, 0x18404902, 0xbd80b00a, 0x0f001d91,
    0x000027d8, 0xb08ab580, 0xaf062300, 0x2038c70f, 0x93049005, 0x93029303, 0x93009301, 0x8010f3ef,
    0xa805b672, 0x4a054669, 0xb6624790, 0x28009800, 0x4903d001, 0xb00a1840, 0x46c0bd80, 0x0f001d91,
    0x000027d8, 0xb08ab510, 0x2300461c, 0x92089309, 0x90069107, 0x90052049, 0x93039304, 0x93019302,
    0xf3ef9300, 0xb6728010, 0x4669a805, 0x47904a07, 0x9804b662, 0x9a029903, 0xc40f9b01, 0x28009800,
    0x4903d001, 0xb00a1840, 0x46c0bd10, 0x0f001d91, 0x000027d8, 0xb08ab580, 0x92092200, 0xc307ab06,
    0x90052050, 0x92039204, 0x92019202, 0xf3ef9200, 0xb6728010, 0x4669a805, 0x47904a04, 0x9800b662,
    0xd0012800, 0x18404902, 0xbd80b00a, 0x0f001d91, 0x000027d8, 0xb08ab580, 0x92092200, 0xc307ab06,
    0x90052051, 0x92039204, 0x92019202, 0xf3ef9200, 0xb6728010, 0x4669a805, 0x47904a04, 0x9800b662,
    0xd0012800, 0x18404902, 0xbd80b00a, 0x0f001d91, 0x000027d8, 0xb5104603, 0x079b430b, 0x2a04d10f,
    0xc808d30d, 0x1f12c910, 0xd0f842a3, 0xba21ba18, 0xd9014288, 0xbd102001, 0x43c02000, 0x2a00bd10,
    0x07d3d003, 0x1c52d003, 0x2000e007, 0x7803bd10, 0x1c40780c, 0x1b1b1c49, 0x7803d107, 0x1c40780c,
    0x1b1b1c49, 0x1e92d101, 0x4618d1f1, 0x0843bd10, 0xd31a428b, 0x09032200, 0xd379428b, 0x428b0a03,
    0x0b03d35e, 0xd342428b, 0x428b0c03, 0x0209d327, 0xba1222ff, 0x428b0c03, 0x1212d302, 0xd0030209,
    0x428b0b03, 0xe01ad333, 0x1a41e0d3, 0x1c404180, 0x46034770, 0xd471430b, 0x428b0843, 0x2200d3f5,
    0x428b0903, 0x0a03d354, 0xd339428b, 0x428b0b03, 0x0c03d31d, 0xd302428b, 0xe06e4694, 0x0bc30a09,
    0xd301428b, 0x1ac003cb, 0x0b834152, 0xd301428b, 0x1ac0038b, 0x0b434152, 0xd301428b, 0x1ac0034b,
    0x0b034152, 0xd301428b, 0x1ac0030b, 0x0ac34152, 0xd301428b, 0x1ac002cb, 0x0a834152, 0xd301428b,
    0x1ac0028b, 0x0a434152, 0xd301428b, 0x1ac0024b, 0x0a034152, 0xd301428b, 0x1ac0020b, 0xd2cd4152,
    0x428b09c3, 0x01cbd301, 0x41521ac0, 0x428b0983, 0x018bd301, 0x41521ac0, 0x428b0943, 0x014bd301,
    0x41521ac0, 0x428b0903, 0x010bd301, 0x41521ac0, 0x428b08c3, 0x00cbd301, 0x41521ac0, 0x428b0883,
    0x008bd301, 0x41521ac0, 0x428b0843, 0x004bd301, 0x41521ac0, 0x41521a41, 0x47700010, 0xd0000fca,
    0x10034249, 0x4240d300, 0x22004053, 0x0903469c, 0xd32d428b, 0x428b0a03, 0x0189d312, 0xba1222fc,
    0x428b0a03, 0x0189d30c, 0x428b1192, 0x0189d308, 0x428b1192, 0x0189d304, 0x1192d037, 0x0989e000,
    0x428b09c3, 0x01cbd301, 0x41521ac0, 0x428b0983, 0x018bd301, 0x41521ac0, 0x428b0943, 0x014bd301,
    0x41521ac0, 0x428b0903, 0x010bd301, 0x41521ac0, 0x428b08c3, 0x00cbd301, 0x41521ac0, 0x428b0883,
    0x008bd301, 0x41521ac0, 0x0843d2d9, 0xd301428b, 0x1ac0004b, 0x1a414152, 0x4601d200, 0x46104152,
    0x105b4663, 0x4240d300, 0x46634770, 0xd300105b, 0xb5014240, 0x42002100, 0x43c9d001, 0x46c04608,
    0xbd0246c0, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x10000005,
    'pc_unInit': 0x1000003d,
    'pc_program_page': 0x100000a5,
    'pc_erase_sector': 0x10000071,
    'pc_eraseAll': 0x10000041,

    'static_base' : 0x10000000 + 0x00000004 + 0x00000724,
    'begin_stack' : 0x10001930,
    'end_stack' : 0x10000930,
    'begin_data' : 0x10000000 + 0x1000,
    'page_size' : 0x100,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    # Enable double buffering
    'page_buffers' : [
        0x10000730,
        0x10000830
    ],
    'min_program_length' : 0x100,

    # Relative region addresses and sizes
    'ro_start': 0x4,
    'ro_size': 0x724,
    'rw_start': 0x728,
    'rw_size': 0x4,
    'zi_start': 0x72c,
    'zi_size': 0x0,

    # Flash information
    'flash_start': 0x0,
    'flash_size': 0x10000,
    'sector_sizes': (
        (0x0, 0x400),
    )
}




class LPC865(CoreSightTarget):

    VENDOR = "NXP"

    MEMORY_MAP = MemoryMap(
        FlashRegion(start=0, length=0x010000, blocksize=0x400, page_size=0x100, is_boot_memory=True, algo=FLASH_ALGO),
        RamRegion(name="SRAM", start=0x10000000, length=0x1fe0),
        RamRegion(name="IAP_SRAM", start=0x10001fe0, length=0x20),
        )

    def __init__(self, session):
        super().__init__(session, self.MEMORY_MAP)

    def reset_and_halt(self, reset_type=None, map_to_user=True):
        super().reset_and_halt(reset_type)

        # Remap to use flash and set SP and SP accordingly
        if map_to_user:
            self.write_memory(0x40048000, 0x2)
            sp = self.read_memory(0x0)
            pc = self.read_memory(0x4)
            self.write_core_register('sp', sp)
            self.write_core_register('pc', pc)
